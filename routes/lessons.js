const express = require('express');
const router = express.Router();
const { db } = require('../initDB');
const bcrypt = require('bcrypt');  

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É—Ä–æ–∫–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º
router.get('/', (req, res) => {
  const search = req.query.search || '';
  const sql = search
    ? `SELECT * FROM lessons WHERE title LIKE ?`
    : `SELECT * FROM lessons`;
  const params = search ? [`%${search}%`] : [];

  db.all(sql, params, (err, lessons) => {
    if (err) return res.status(500).send('Database error');
    res.render('index', {
      lessons,
      search,
      user: req.session.user // üëà –ø–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });
  });
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
router.get('/register', (req, res) => {
  res.render('register', { error: null, user: req.session.user });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
router.post('/register', async (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.render('register', { error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
  }

  const hashedPassword = await bcrypt.hash(password, 10);

  db.run(
    `INSERT INTO users (username, password) VALUES (?, ?)`,
    [username, hashedPassword],
    function (err) {
      if (err) {
        return res.render('register', { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
      res.redirect('/login');
    }
  );
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
router.get('/login', (req, res) => {
  res.render('login', { error: null, user: req.session.user });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
router.post('/login', (req, res) => {
  const { username, password } = req.body;

  db.get(`SELECT * FROM users WHERE username = ?`, [username], async (err, user) => {
    if (err || !user) {
      return res.render('login', { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const match = await bcrypt.compare(password, user.password);

    if (!match) {
      return res.render('login', { error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    req.session.user = {
      id: user.id,
      username: user.username
    };

    res.redirect('/');
  });
});

// –í—ã—Ö–æ–¥
router.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/login');
  });
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ 
router.get('/lesson/new', (req, res) => {
  res.render('form', { lesson: {}, questions: [] });
});

//  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ 
router.post('/lesson/new', (req, res) => {
    const { title, description, content, video_url, image_url } = req.body;
    const sql = `INSERT INTO lessons (title, description, content, video_url, image_url) VALUES (?, ?, ?, ?, ?)`;
    db.run(sql, [title, description, content, video_url, image_url], function(err) {
      if (err) return res.status(500).send('Database error');
  
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      res.redirect('/');
    });
  });

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞ 
router.get('/lesson/edit/:id', (req, res) => {
  const id = req.params.id;
  db.get('SELECT * FROM lessons WHERE id = ?', [id], (err, lesson) => {
    if (err) return res.status(500).send('Database error');
    if (!lesson) return res.status(404).send('Lesson not found');
    db.all('SELECT * FROM questions WHERE lesson_id = ?', [id], (err, questions) => {
      if (err) return res.status(500).send('Database error');
      res.render('form', { lesson, questions });
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ 
router.post('/lesson/edit/:id', (req, res) => {
  const id = req.params.id;
  const { title, description, content, video_url, image_url } = req.body;
  const sql = `UPDATE lessons SET title = ?, description = ?, content = ?, video_url = ?, image_url = ? WHERE id = ?`;
  db.run(sql, [title, description, content, video_url, image_url, id], err => {
    if (err) return res.status(500).send('Database error');
    res.redirect(`/lesson/${id}`);
  });
});
// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞
router.get('/lesson/:id', (req, res) => {
    const id = req.params.id;
    db.get('SELECT * FROM lessons WHERE id = ?', [id], (err, lesson) => {
      if (err) return res.status(500).send('Database error');
      if (!lesson) return res.status(404).send('Lesson not found');
  
      db.all('SELECT * FROM questions WHERE lesson_id = ?', [id], (err, questions) => {
        if (err) return res.status(500).send('Database error');
  
        const hasQuestions = questions.length > 0;
  
        res.render('lesson', { lesson, questions, hasQuestions });
      });
    });
  });
  
// –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ 
router.post('/lesson/delete/:id', (req, res) => {
  const id = req.params.id;
  db.run('DELETE FROM lessons WHERE id = ?', [id], err => {
    if (err) return res.status(500).send('Database error');
    res.redirect('/');
  });
});
// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É—Ä–æ–∫–∞ 
router.get('/lesson/:id/question/new', (req, res) => {
    const lesson_id = req.params.id;
    res.render('question_form', { lesson_id });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ 
  router.post('/lesson/:id/question/new', (req, res) => {
    const lesson_id = req.params.id;
    const { question_text, question_type, options, correct_answer, explanation } = req.body;
  
    const sql = `
      INSERT INTO questions (lesson_id, question_text, question_type, options, correct_answer, explanation)
      VALUES (?, ?, ?, ?, ?, ?)`;
    
    db.run(sql, [
      lesson_id,
      question_text,
      question_type,
      options ? JSON.stringify(options) : null,
      correct_answer,
      explanation
    ], err => {
      if (err) return res.status(500).send('Database error');
      res.redirect(`/lesson/${lesson_id}`);
    });
  });
  
  router.get('/lesson/:id/answer', (req, res) => {
    const lessonId = req.params.id;
  
    db.get('SELECT * FROM lessons WHERE id = ?', [lessonId], (err, lesson) => {
      if (err || !lesson) return res.status(404).send('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
      db.all('SELECT * FROM questions WHERE lesson_id = ?', [lessonId], (err, questions) => {
        if (err) return res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤');
  
        res.render('quiz', {
          lesson,
          questions
        });
      });
    });
  });

  function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    const sortedA = [...a].sort();
    const sortedB = [...b].sort();
    return sortedA.every((val, index) => val === sortedB[index]);
  }
  
  router.post('/lesson/:id/check-answer', (req, res) => {
    const { questionId, answer } = req.body;
  
    db.get('SELECT * FROM questions WHERE id = ?', [questionId], (err, question) => {
      if (err || !question) {
        return res.status(400).render('wrong', {
          message: '‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
  
      let correct = false;
      if (question.question_type === 'multiple-choice') {
        try {
          const correctAnswers = JSON.parse(question.correct_answer);
          const userAnswers = Array.isArray(answer) ? answer : [answer];
  
          correct = arraysEqual(userAnswers, correctAnswers);
        } catch {
          correct = answer === question.correct_answer;
        }
      } else if (question.question_type === 'short-answer') {
        correct = answer.trim().toLowerCase() === question.correct_answer.trim().toLowerCase();
      }
  
      if (correct) {
        res.render('success', {
          explanation: question.explanation,
          question: question.question_text
        });
      } else {
        res.render('wrong', {
          explanation: question.explanation,
          question: question.question_text
        });
      }
    });
  });
  

module.exports = router;
